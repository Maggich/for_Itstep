import psycopg2

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = psycopg2.connect(
    dbname="postgres",
    user="postgres",
    password="1234",
    host="localhost",
    port="5432"
)
cur = conn.cursor()

# üìå –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
cur.execute("""
    CREATE TABLE IF NOT EXISTS products (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        price INTEGER NOT NULL
    );
""")
conn.commit()

# üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
def add_product(name, price):
    cur.execute("INSERT INTO products (name, price) VALUES (%s, %s) RETURNING id;", (name, price))
    conn.commit()
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {name} –∑–∞ {price} —Ä—É–±.")

# üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
def show_products():
    cur.execute("SELECT * FROM products;")
    products = cur.fetchall()
    print("\nüìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:")
    for p in products:
        print(f"üÜî ID: {p[0]}, üì¶ {p[1]}, üí∞ {p[2]} —Ä—É–±.")
    if not products:
        print("‚ùå –¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç!")

# üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
def update_price(product_id, new_price):
    cur.execute("UPDATE products SET price = %s WHERE id = %s;", (new_price, product_id))
    conn.commit()
    print(f"üîÑ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è ID {product_id} ‚Üí {new_price} —Ä—É–±.")

# üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
def delete_product(product_id):
    cur.execute("DELETE FROM products WHERE id = %s;", (product_id,))
    conn.commit()
    print(f"üóëÔ∏è –¢–æ–≤–∞—Ä —Å ID {product_id} —É–¥–∞–ª–µ–Ω.")

# üìå –¢–µ—Å—Ç–∏—Ä—É–µ–º CRUD
add_product("–ö–Ω–∏–≥–∞", 500)
add_product("–ù–∞—É—à–Ω–∏–∫–∏", 2000)
add_product("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞", 3500)

show_products()  # –í—ã–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã

update_price(1, 450)  # –ú–µ–Ω—è–µ–º —Ü–µ–Ω—É –∫–Ω–∏–≥–∏
delete_product(2)  # –£–¥–∞–ª—è–µ–º –Ω–∞—É—à–Ω–∏–∫–∏

show_products()  # –°–Ω–æ–≤–∞ –≤—ã–≤–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã

# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
cur.close()
conn.close()
