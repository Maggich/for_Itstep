import psycopg2

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ
def connect_db():
    return psycopg2.connect(
        dbname="postgres",
        user="postgres",
        password="1234",
        host="localhost",
        port="5432"
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
def initialize_db():
    with connect_db() as conn:
        with conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100) UNIQUE NOT NULL,
                    balance INTEGER NOT NULL DEFAULT 0
                );
            """)
            conn.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

# CREATE ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
def create_user(name, balance):
    with connect_db() as conn:
        with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cur.execute("SELECT id FROM users WHERE name = %s;", (name,))
            user = cur.fetchone()

            if user:
                print(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å ID {user[0]}")
                return user[0]

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("INSERT INTO users (name, balance) VALUES (%s, %s) RETURNING id;", (name, balance))
            user_id = cur.fetchone()[0]
            conn.commit()
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} —Å–æ–∑–¥–∞–Ω —Å ID {user_id}")
            return user_id

# READ ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def read_users():
    with connect_db() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT id, name, balance FROM users ORDER BY id;")
            users = cur.fetchall()
            print("\nüìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for user in users:
                print(f"üîπ ID: {user[0]}, –ò–º—è: {user[1]}, –ë–∞–ª–∞–Ω—Å: {user[2]} —Ä—É–±.")
            return users

# UPDATE ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_balance(user_id, new_balance):
    with connect_db() as conn:
        with conn.cursor() as cur:
            cur.execute("UPDATE users SET balance = %s WHERE id = %s;", (new_balance, user_id))
            conn.commit()
            print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ {new_balance} —Ä—É–±.")

# DELETE ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_user(user_id):
    with connect_db() as conn:
        with conn.cursor() as cur:
            cur.execute("DELETE FROM users WHERE id = %s;", (user_id,))
            conn.commit()
            print(f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω.")

# TRANSFER ‚Äî –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def transfer_money(sender_name, receiver_name, amount):
    with connect_db() as conn:
        with conn.cursor() as cur:
            try:
                # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                cur.execute("SELECT id, balance FROM users WHERE name = %s;", (sender_name,))
                sender_data = cur.fetchone()
                if sender_data is None:
                    print(f"‚ùå –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å {sender_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return
                sender_id, sender_balance = sender_data
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                if sender_balance < amount:
                    print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É {sender_name}!")
                    return

                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                cur.execute("SELECT id FROM users WHERE name = %s;", (receiver_name,))
                receiver_data = cur.fetchone()
                if receiver_data is None:
                    print(f"‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å {receiver_name} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return
                receiver_id = receiver_data[0]

                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                cur.execute("UPDATE users SET balance = balance - %s WHERE id = %s;", (amount, sender_id))
                cur.execute("UPDATE users SET balance = balance + %s WHERE id = %s;", (amount, receiver_id))
                conn.commit()
                print(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ {amount} —Ä—É–±. –æ—Ç {sender_name} –∫ {receiver_name} –≤—ã–ø–æ–ª–Ω–µ–Ω!")
            except Exception as e:
                conn.rollback()
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")

# –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    initialize_db()
    
    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∏—Ö ID, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å)
    alexey_id = create_user("–ê–ª–µ–∫—Å–µ–π", 2000)
    olga_id = create_user("–û–ª—å–≥–∞", 1500)

    # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    read_users()

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º 500 —Ä—É–±–ª–µ–π –æ—Ç –ê–ª–µ–∫—Å–µ—è –∫ –û–ª—å–≥–µ
    transfer_money("–û–ª—å–≥–∞", "–ê–ª–µ–∫—Å–µ–π", 1000)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    read_users()


import psycopg2
from psycopg2 import sql

def create_tables():
    try:
        conn = psycopg2.connect(
            dbname="postgres",  # –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user="postgres",    # –í–∞—à –ª–æ–≥–∏–Ω
            password="1234",    # –í–∞—à –ø–∞—Ä–æ–ª—å
            host="localhost",   # –ê–¥—Ä–µ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            port="5432"         # –ü–æ—Ä—Ç
        )

        cur = conn.cursor()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100),
                email VARCHAR(100) UNIQUE NOT NULL,
                balance INTEGER NOT NULL
            );
        """)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤
        cur.execute("""
            CREATE TABLE IF NOT EXISTS products (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100),
                price INTEGER NOT NULL
            );
        """)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤
        cur.execute("""
            CREATE TABLE IF NOT EXISTS orders (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id),
                product_id INTEGER REFERENCES products(id),
                quantity INTEGER NOT NULL,
                total INTEGER NOT NULL
            );
        """)

        conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã users, products –∏ orders —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:", e)
        conn.rollback()

    finally:
        cur.close()
        conn.close()


def add_sample_data():
    try:
        conn = psycopg2.connect(
            dbname="postgres",
            user="postgres",
            password="1234",
            host="localhost",
            port="5432"
        )

        cur = conn.cursor()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("INSERT INTO users (name, email, balance) VALUES (%s, %s, %s) ON CONFLICT (email) DO NOTHING;", ("–ò–≤–∞–Ω", "ivan@example.com", 1000))
        cur.execute("INSERT INTO users (name, email, balance) VALUES (%s, %s, %s) ON CONFLICT (email) DO NOTHING;", ("–ú–∞—Ä–∏—è", "maria@example.com", 500))

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        cur.execute("INSERT INTO products (name, price) VALUES (%s, %s) ON CONFLICT (name) DO NOTHING;", ("–¢–æ–≤–∞—Ä 1", 300))
        cur.execute("INSERT INTO products (name, price) VALUES (%s, %s) ON CONFLICT (name) DO NOTHING;", ("–¢–æ–≤–∞—Ä 2", 150))

        conn.commit()
        print("‚úÖ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", e)
        conn.rollback()

    finally:
        cur.close()
        conn.close()


def create_order(user_id, product_id, quantity):
    try:
        conn = psycopg2.connect(
            dbname="postgres",
            user="postgres",
            password="1234",
            host="localhost",
            port="5432"
        )

        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        cur.execute("SELECT price FROM products WHERE id = %s;", (product_id,))
        product = cur.fetchone()
        if product:
            price = product[0]
            total = price * quantity

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cur.execute("SELECT balance FROM users WHERE id = %s;", (user_id,))
            balance = cur.fetchone()[0]

            if balance >= total:
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cur.execute("UPDATE users SET balance = balance - %s WHERE id = %s;", (total, user_id))

                # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
                cur.execute("""
                    INSERT INTO orders (user_id, product_id, quantity, total)
                    VALUES (%s, %s, %s, %s);
                """, (user_id, product_id, quantity, total))

                conn.commit()
                print(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total} —Ä—É–±.")
            else:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!")

        else:
            print("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", e)
        conn.rollback()

    finally:
        cur.close()
        conn.close()


def read_orders():
    try:
        conn = psycopg2.connect(
            dbname="postgres",
            user="postgres",
            password="1234",
            host="localhost",
            port="5432"
        )

        cur = conn.cursor()

        # –ß—Ç–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
        cur.execute("""
            SELECT o.id, u.name, p.name, o.quantity, o.total
            FROM orders o
            JOIN users u ON o.user_id = u.id
            JOIN products p ON o.product_id = p.id;
        """)

        orders = cur.fetchall()
        if orders:
            print("‚úÖ –ó–∞–∫–∞–∑—ã:")
            for order in orders:
                print(f"ID: {order[0]}, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order[1]}, –¢–æ–≤–∞—Ä: {order[2]}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order[3]}, –°—É–º–º–∞: {order[4]}")
        else:
            print("‚ùå –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", e)

    finally:
        cur.close()
        conn.close()


def update_balance(user_id, new_balance):
    try:
        conn = psycopg2.connect(
            dbname="postgres",
            user="postgres",
            password="1234",
            host="localhost",
            port="5432"
        )

        cur = conn.cursor()

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur.execute("UPDATE users SET balance = %s WHERE id = %s;", (new_balance, user_id))
        conn.commit()
        print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", e)
        conn.rollback()

    finally:
        cur.close()
        conn.close()


def delete_order(order_id):
    try:
        conn = psycopg2.connect(
            dbname="postgres",
            user="postgres",
            password="1234",
            host="localhost",
            port="5432"
        )

        cur = conn.cursor()

        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        cur.execute("DELETE FROM orders WHERE id = %s;", (order_id,))
        conn.commit()
        print(f"‚úÖ –ó–∞–∫–∞–∑ —Å ID {order_id} —É–¥–∞–ª–µ–Ω!")

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", e)
        conn.rollback()

    finally:
        cur.close()
        conn.close()


# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
if __name__ == "__main__":
    create_tables()       # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    add_sample_data()     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    create_order(1, 1, 2) # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    read_orders()         # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    update_balance(1, 900) # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    delete_order(0)       # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞